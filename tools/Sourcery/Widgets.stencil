
import Elementary

extension Config {
	enum Widget: Decodable {
		{% for type in types.implementing.WidgetConfig %}
		case {{ type.name|lowerFirstLetter }}({{ type.name }})
		{% endfor %}
		case error(String)

		enum CodingKeys: String, CodingKey {
			case type
		}

		init(from decoder: Decoder) {
			do {
				let container = try decoder.container(keyedBy: CodingKeys.self)
				let type = try container.decode(String.self, forKey: .type)
				switch type {
				{% for type in types.implementing.WidgetConfig %}
				case "{{ type.name|lowercase }}":
					let value = try {{ type.name }}(from: decoder)
					self = .{{ type.name|lowerFirstLetter }}(value)
				{% endfor %}
				default:
					self = .error("Unsupported type: \(type)")
				}
			} catch {
				self = .error("Failed to parse widget config")
			}
		}

		func createService(id: String, publisher: Publisher) -> (any WidgetService)? {
			switch self {
			{% for type in types.implementing.WidgetConfig %}
			case let .{{ type.name|lowerFirstLetter }}(config):
				{{ type.name }}.Service(id: id, config: config, publisher: publisher)
			{% endfor %}
			case .error:
				nil
			}
		}

		// FIXME: make the return type `sending some HTML` after this is fixed: https://github.com/swiftlang/swift/issues/84318
		@HTMLBuilder
		func placeholder() -> some HTML {
			switch self {
			{% for type in types.implementing.WidgetConfig %}
			case let .{{ type.name|lowerFirstLetter }}(config):
				config.render(response: nil)
			{% endfor %}
			case let .error(error):
				ErrorView(title: error)
			}
		}
	}
}
